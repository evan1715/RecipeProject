- Currently only production mode works with the backend fully. Use to test client-server-database usage.


*~~~~~=~~~~~* Running client, server, etc. *~~~~~=~~~~~*
> Terminal must be in root folder.

- If compiling front into a build:
    1. npm run build:dev for development build.
    2. npm run build:prod for production build.

- If working on only client: 
    1. npm run client
    * This will allow active reload in the browser on port 3000.

- If working on only server:
    1. Turn on database service with npm run db
    2. In a new terminal, use npm run server
    * Server will be on port 3000.

- If working on client & server WITH server auto-restarting (nodemon):
    * This will build out the project and will have to open the browser manually. Webpack will be watched to recompile when changes are made and the server will restart because nodemon is on.
    1. Turn on database service with npm run db
    2. In a new terminal, use npm run dev
    * Will run on port 3000.

- If working on production build:
    * This will build out the project and will have to open the browser manually. Webpack will be watched to recompile when changes are made and the server will restart because nodemon is on.
    1. Turn on database service with npm run db
    2. In new terminal, npm run prod
    * Will run on port 3000.





//To run a command WITH a script, use something like:
npm run test -- --watch
npm run dev -- --node-env development



//cmd line palette for VSC
ctrl shift p







//Three ways to set up babel configuration.
npm install @babel/preset-env @babel/preset-react @babel-core @babel-loader --save-dev
// https://babeljs.io/docs/en/configuration 
1. Create .babelrc or babel.config.json or .babelrc.json file in the root and put in 
{
  "presets": [
      "@babel/env",
      "@babel/react"
  ]
}
2. Add in babel configuration to package.json
  "babel": {
    "presets": [
        "@babel/env",
        "@babel/react"
    ]
  }
3. Place the presets inside webpack.config.js
 module: {
        rules: [{
            test: /\.js$/,
            use: {
                loader: 'babel-loader', //loader runs a single loader
                options: {
                    presets: ['@babel/preset-env, @babel/preset-react']
                }
            },
            exclude: /node_modules/
        }







*~~~~~=~~~~~*
To run on one port, to have the front of React run through the Node server, we must first create it as a build. Then, in server.js, instead of using client/public, we can use client/build. This is because React needs to be compiled into something the browser can actually understand. In development, react-scripts, webpack, and babel all handle that for us.
*~~~~~=~~~~~*

